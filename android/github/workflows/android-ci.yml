name: Android CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [28, 29, 30, 31]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: Run unit tests
      working-directory: android
      run: ./gradlew testDebugUnitTest --continue --stacktrace

    - name: Generate unit test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Test Results
        path: 'android/app/build/test-results/testDebugUnitTest/*.xml'
        reporter: java-junit

    - name: Run lint checks
      working-directory: android
      run: ./gradlew lintDebug

    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: android/app/build/reports/lint-results-debug.html

  instrumentation-test:
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [28, 29, 30]
        target: [default, google_apis]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: AVD cache
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}-${{ matrix.target }}

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Run instrumentation tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          cd android
          ./gradlew connectedDebugAndroidTest --stacktrace

    - name: Generate instrumentation test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Instrumentation Test Results (API ${{ matrix.api-level }})
        path: 'android/app/build/outputs/androidTest-results/connected/*.xml'
        reporter: java-junit

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: Run security tests
      working-directory: android
      run: ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.plstravels.driver.security.SecurityValidationTest

    - name: Run OWASP dependency check
      working-directory: android
      run: ./gradlew dependencyCheckAnalyze

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: android/app/build/reports/

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: Run performance benchmarks
      working-directory: android
      run: ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.plstravels.driver.performance.LocationTrackingPerformanceTest

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: android/app/build/outputs/connected_android_test_additional_output/

  build:
    runs-on: ubuntu-latest
    needs: [test, instrumentation-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: Decode Keystore
      env:
        ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo $ENCODED_STRING | base64 -di > android/app/keystore.jks

    - name: Build Release APK
      working-directory: android
      env:
        KEYSTORE_FILE: keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: ./gradlew assembleRelease

    - name: Build Release Bundle
      working-directory: android
      env:
        KEYSTORE_FILE: keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: ./gradlew bundleRelease

    - name: Upload Release APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: android/app/build/outputs/apk/release/*.apk

    - name: Upload Release Bundle
      uses: actions/upload-artifact@v3
      with:
        name: release-bundle
        path: android/app/build/outputs/bundle/release/*.aab

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: Run code coverage
      working-directory: android
      run: ./gradlew testDebugUnitTestCoverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: android/app/build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml
        flags: android
        name: android-coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: android/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release bundle
      uses: actions/download-artifact@v3
      with:
        name: release-bundle

    - name: Deploy to Google Play Console (Internal Testing)
      uses: r0adkll/upload-google-play@v1.1.1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.plstravels.driver
        releaseFiles: '*.aab'
        track: internal
        status: completed

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release bundle
      uses: actions/download-artifact@v3
      with:
        name: release-bundle

    - name: Deploy to Google Play Console (Production)
      uses: r0adkll/upload-google-play@v1.1.1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.plstravels.driver
        releaseFiles: '*.aab'
        track: production
        status: completed

  notification:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#android-builds'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}