Create a Node.js Repl

Install Playwright:

npm init -y
npm install @playwright/test
npx playwright install


Add a playwright.config.js:

// playwright.config.js
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 60000,
  use: {
    baseURL: 'http://localhost:3000', // change to your app URL
    headless: true,
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
  },
});

üß™ Example Playwright Tests
1. Login & Role Access Test
// tests/login.spec.js
import { test, expect } from '@playwright/test';

test.describe('Role-based Access', () => {
  test('Admin can access dashboard', async ({ page }) => {
    await page.goto('/');
    await page.fill('#username', 'admin');
    await page.fill('#password', 'password123');
    await page.click('button[type=submit]');
    await expect(page).toHaveURL(/.*dashboard/);
    await expect(page.locator('h1')).toContainText('Admin Dashboard');
  });

  test('Driver cannot access Admin pages', async ({ page }) => {
    await page.goto('/');
    await page.fill('#username', 'driver1');
    await page.fill('#password', 'driverpass');
    await page.click('button[type=submit]');
    await page.goto('/admin');
    await expect(page.locator('body')).toContainText('Access Denied');
  });
});

2. Driver Onboarding Workflow
// tests/onboarding.spec.js
import { test, expect } from '@playwright/test';

test('Driver Onboarding Flow', async ({ page }) => {
  await page.goto('/drivers/new');

  await page.fill('#name', 'John Doe');
  await page.fill('#aadhar', '1234-5678-9101');
  await page.setInputFiles('#licenseUpload', 'tests/files/license.jpg');
  await page.fill('#bankAccount', '9876543210');

  await page.click('button[type=submit]');
  await expect(page.locator('.status')).toContainText('Pending Approval');
});

3. Duty Start & End Workflow
// tests/duty.spec.js
import { test, expect } from '@playwright/test';

test('Driver starts and ends duty', async ({ page }) => {
  await page.goto('/login');
  await page.fill('#username', 'driver1');
  await page.fill('#password', 'driverpass');
  await page.click('button[type=submit]');

  await page.goto('/duties/start');
  await page.fill('#odometerStart', '12000');
  await page.setInputFiles('#startPhoto', 'tests/files/start.jpg');
  await page.click('button#startDuty');
  await expect(page.locator('.status')).toContainText('Active');

  await page.goto('/duties/end');
  await page.fill('#odometerEnd', '12050');
  await page.setInputFiles('#endPhoto', 'tests/files/end.jpg');
  await page.click('button#endDuty');
  await expect(page.locator('.status')).toContainText('Pending Approval');
});

4. Financial Workflow (Salary Calculation)
// tests/finance.spec.js
import { test, expect } from '@playwright/test';

test('Admin approves duty and salary is calculated', async ({ page }) => {
  await page.goto('/login');
  await page.fill('#username', 'admin');
  await page.fill('#password', 'password123');
  await page.click('button[type=submit]');

  await page.goto('/finance/pending');
  await page.click('button.approve-duty'); 

  await expect(page.locator('.salary-status')).toContainText('Calculated');
});

‚ñ∂Ô∏è Run Tests
npx playwright test


For UI debugging inside Replit:

npx playwright test --headed --debug


‚úÖ These tests cover RBAC, onboarding, duty cycle, and finance workflows.
You can expand with:

Vehicle management (registration, compliance alerts)

Assignment system (AI matching ‚Üí conflict detection)

Document expiry alerts

Uber Fleet API sync