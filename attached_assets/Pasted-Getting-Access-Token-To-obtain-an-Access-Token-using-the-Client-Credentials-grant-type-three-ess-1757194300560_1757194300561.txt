Getting Access Token

To obtain an Access Token using the Client Credentials grant type, three essential components are required:

Client ID: A unique identifier assigned to your application when you register it on the platform.
Client Secret: A confidential key associated with your application, used for authentication during token exchange.
Scope Names: Specific permissions or scopes that define the actions your application is allowed to perform.
Steps to Obtain Client Credentials

Create and Configure Your Application:

Log in to the Uber Developer Dashboard.
Click on Create Application.
Fill in the required details (e.g., privacy policy URLs, redirect URLs) in the setup tab.
Once created, your application will appear under the TestApp section as shown in Fig 1.
Access Token via Client Credentials:

Navigate to the Access Token section under your application settings.
Select the Client Credentials option.
Note the Scopes Authorized displayed. These are the permissions an application requires.
Generate Client ID and Client Secret:

Click on Generate to create your Client ID and Client Secret.
Save these credentials securely. They are essential for authenticating an application and obtaining an access token. TestApplicationDashboardView
Example Request:

curl --location 'https://auth.uber.com/oauth/v2/token' \
   --form 'client_secret="<CLIENT_SECRET>"' \
   --form 'client_id="<CLIENT_ID>"' \
   --form 'grant_type="client_credentials"' \
   --form 'scope="<SPACE_DELIMITED_LIST_OF_SCOPES>"'
In this request provide Client ID, Client Secret, Grant Type (set to Client_Credentials for client credential flow) and Scopes which the developer wants to access.

Example Response:

{
   "access_token": "<TOKEN>",
   "expires_in": 2592000,
   "token_type": "Bearer",
   "refresh_token": "<REFRESH_TOKEN>",
   "scope": "SCOPES_PASSED_EARLIER_FOR_OAUTH"
}
Upon successful authentication and authorization, the platform returns an Access Token, along with additional information such as the expiration time (expires_in), token type (Bearer), a Refresh Token for token renewal, and the associated scope.

Access Token Expiration

The Access Token obtained through the Client Credentials flow has a limited lifespan, as indicated by the expires_in field in the response. Typically, Access Tokens expire after a certain period of time. It’s crucial to manage token expiration and implement token refreshing mechanisms to maintain secure and uninterrupted access to APIs.
Notes
Encryption/Decryption Process All drivers’ personal identifiers exposed through the API need to be encrypted through a standard encryption process. The details about the encryption and decryption process are mentioned below.

Prerequisite

The 3rd party will generate the RSA public-private key pair (2048-bit key size) and share the public key with Uber through an encrypted channel (Your Uber POC will connect you to the engineering team).
Encryption

Uber will generate an AES symmetric key.
This symmetric key will be used to encrypt the driver identifiers. RSA is not directly used because it is non-performant for large objects, whereas AES is more efficient for those cases.
The driver’s personal identifier will be encrypted using the above-mentioned symmetric key by the aes-256-gcm algorithm. GCM mode ensures the integrity of the payload. In the encrypted payload, the first 12 bytes contain the IV, and the rest contains the data.
The symmetric key will be encrypted using the pre-supplied RSA public key and the RSA-OAEP algorithm.
The encrypted symmetric key will be added in the API response as the encrypted_symmetric_key field. All other encrypted fields in the API response will start with the encrypted_ prefix.
Decryption

The 3rd party will first decrypt the encrypted AES symmetric key using their RSA private key.