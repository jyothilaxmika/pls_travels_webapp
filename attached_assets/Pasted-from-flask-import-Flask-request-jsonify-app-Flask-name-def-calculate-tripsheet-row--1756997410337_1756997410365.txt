from flask import Flask, request, jsonify

app = Flask(__name__)

def calculate_tripsheet(row):
    # 1. Base salary (guarantee)
    company_pay = row.get("company_pay", 0)

    # 2. Incentive (only if earnings > operator bill)
    incentive = max(row.get("cash_collected", 0) - row.get("operator_bill", 0), 0)

    # 3. Deductions
    advance = row.get("advance", 0)
    driver_expenses = row.get("driver_expenses", 0)
    pass_deduction = row.get("pass_deduction", 0)

    # 4. Final Driver Salary
    driver_salary = company_pay + incentive - (advance + driver_expenses + pass_deduction)

    # 5. Company Earnings (all collected amounts)
    earnings = (
        row.get("cash_collected", 0)
        + row.get("qr_payment", 0)
        + row.get("outside_cash", 0)
    )

    # 6. Company Expenses
    expenses = (
        row.get("operator_bill", 0)
        + row.get("toll", 0)
        + row.get("petrol_expenses", 0)
        + row.get("gas_expenses", 0)
        + row.get("other_expenses", 0)
    )

    # 7. Company Profit
    company_profit = earnings - (driver_salary + expenses)

    return {
        "Company Pay": company_pay,
        "Incentive": incentive,
        "Advance": advance,
        "Driver Expenses": driver_expenses,
        "Pass Deduction": pass_deduction,
        "Driver Salary": driver_salary,
        "Company Earnings": earnings,
        "Company Expenses": expenses,
        "Company Profit": company_profit,
    }

# ðŸ”¹ API Endpoint
@app.route("/calculate-salary", methods=["POST"])
def calculate_salary():
    data = request.get_json()

    if not data:
        return jsonify({"error": "No input provided"}), 400

    # Handle single row or multiple rows
    if isinstance(data, dict):
        result = calculate_tripsheet(data)
    elif isinstance(data, list):
        result = [calculate_tripsheet(row) for row in data]
    else:
        return jsonify({"error": "Invalid input format"}), 400

    return jsonify(result)

if __name__ == "__main__":
    app.run(debug=True)
