Got it üëç You want the salary schemes implemented in Python app style.
Here‚Äôs a clean data-driven version you can drop into your app backend:

‚∏ª

üöñ Driver Duty & Salary Calculation ‚Äì Python Implementation

from dataclasses import dataclass

@dataclass
class DutyEntry:
    driver_name: str
    car_number: str
    scheme: int              # 1 = 24H Revenue Share, 2 = 12H Monthly
    cash_collected: float = 0
    qr_payment: float = 0
    outside_cash: float = 0
    start_cng: int = 0
    end_cng: int = 0
    pass_deduction: float = 0
    days_worked: int = 0     # For Scheme 2
    daily_rate: int = 0      # 2000/2500/3000/3500/4000 (for Scheme 2)

class SalaryCalculator:
    INSURANCE = 90
    CNG_RATE = 90
    
    # Daily rate mapping to monthly salary
    MONTHLY_SALARY_MAP = {
        2000: 18000,
        2500: 21000,
        3000: 24000,
        3500: 27000,
        4000: 30000,
    }

    def calculate(self, entry: DutyEntry):
        if entry.scheme == 1:
            return self._calculate_scheme1(entry)
        elif entry.scheme == 2:
            return self._calculate_scheme2(entry)
        else:
            raise ValueError("Invalid scheme. Use 1 or 2.")

    def _calculate_scheme1(self, entry: DutyEntry):
        total_earnings = entry.cash_collected + entry.qr_payment + entry.outside_cash

        # Driver share before deductions
        dsbd = min(total_earnings, 4500) * 0.30 + max(total_earnings - 4500, 0) * 0.70

        # CNG adjustment
        cng_diff = entry.start_cng - entry.end_cng
        cng_adjustment = cng_diff * self.CNG_RATE  # +ve = deduction, -ve = credit

        # Deductions
        deductions = self.INSURANCE + entry.pass_deduction + max(cng_adjustment, 0)

        # Final driver salary
        driver_salary = dsbd - deductions + (min(cng_adjustment, 0) * -1)

        # Company share
        company_share = total_earnings - dsbd

        return {
            "scheme": "Scheme 1 (24H Revenue Share)",
            "driver_name": entry.driver_name,
            "car_number": entry.car_number,
            "total_earnings": total_earnings,
            "driver_salary": round(driver_salary, 2),
            "company_share": round(company_share, 2),
            "cng_adjustment": cng_adjustment,
            "deductions": deductions
        }

    def _calculate_scheme2(self, entry: DutyEntry):
        monthly_salary = self.MONTHLY_SALARY_MAP.get(entry.daily_rate, 0)
        per_day_salary = monthly_salary / 30
        final_salary = per_day_salary * entry.days_worked

        return {
            "scheme": "Scheme 2 (12H Monthly Salary)",
            "driver_name": entry.driver_name,
            "car_number": entry.car_number,
            "monthly_salary": monthly_salary,
            "days_worked": entry.days_worked,
            "driver_salary": round(final_salary, 2),
            "company_share": 0
        }

# ------------------------
# Example Usage
# ------------------------

calc = SalaryCalculator()

# Example A: Scheme 1 (24H Duty)
entry1 = DutyEntry(
    driver_name="Muthu",
    car_number="TN09DE5595",
    scheme=1,
    cash_collected=4000,
    qr_payment=1754,
    outside_cash=0,
    start_cng=5,
    end_cng=3,
    pass_deduction=200
)
print(calc.calculate(entry1))

# Example B: Scheme 2 (12H Duty, Daily Rate 3000, 26 days worked)
entry2 = DutyEntry(
    driver_name="Sakthi",
    car_number="TN09DD4700",
    scheme=2,
    days_worked=26,
    daily_rate=3000
)
print(calc.calculate(entry2))


‚∏ª

üßæ Example Output

Scheme 1 Example:

{
  "scheme": "Scheme 1 (24H Revenue Share)",
  "driver_name": "Muthu",
  "car_number": "TN09DE5595",
  "total_earnings": 5754.0,
  "driver_salary": 1758.0,
  "company_share": 3526.0,
  "cng_adjustment": 180,
  "deductions": 470
}

Scheme 2 Example:

{
  "scheme": "Scheme 2 (12H Monthly Salary)",
  "driver_name": "Sakthi",
  "car_number": "TN09DD4700",
  "monthly_salary": 24000,
  "days_worked": 26,
  "driver_salary": 20800.0,
  "company_share": 0
}


‚∏ª